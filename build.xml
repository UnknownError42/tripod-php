<?xml version="1.0" encoding="UTF-8"?>
<project default="all" name="Tripod" basedir=".">

    <!-- load shell environment -->
    <property environment="ENV" />

    <!-- other properties -->
    <property name="vendor.dir" location="vendor" />
    <property name="lib.dir" location="lib" />
    <property name="test.dir" location="test" />
    <property name="output.dir" location="output" />
    <property name="codecoverage.dir" location="${output.dir}/codecoverage" />
    <property name="unit.test.dir" location="${test.dir}/unit" />
    <property name="test" value="**" />

    <!-- targets -->
    <target name="all" depends="init, test" description="Run full build"/>

    <target name="init" depends="install-composer" description="Re-Initialise, removes and recreates output folder">
        <delete dir="${output.dir}" />
        <mkdir dir="${output.dir}" />

        <!-- Check for updates to Composer -->
        <exec executable="php" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="self-update"/>
        </exec>

        <!-- Install dependencies through Composer -->
        <exec executable="php" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="install"/>
        </exec>

        <!-- Update dependencies through Composer -->
        <exec executable="php" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="update"/>
        </exec>

    </target>

    <target name="check-composer">
        <echo>Checking to see if composer.phar exists...</echo>
        <available file="composer.phar" property="composer.exists"/>
    </target>

    <target name="install-composer" depends="check-composer" unless="composer.exists">
        <echo>Installing composer...</echo>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="curl -sS https://getcomposer.org/installer | php"/>
        </exec>
    </target>

    <target name="test" depends="init, unittest"  description="Runs all tests"/>

    <target name="unittest" depends="init" description="Runs the Unit test suite">
       <antcall target="_unittestPostgresTLog"/>
        <antcall target="_unittestMongoTlog"/>
    </target>

    <target name="_unittestPostgresTLog" description="Runs the Unit test suite against a TransactionLog backed by Postgres">
        <exec dir="${unit.test.dir}" executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <env key="TRIPOD_CONFIG" value="${unit.test.dir}/data/configPostgresTLog.json"/>
            <arg line="--filter ${test} --log-junit ${output.dir}/postgres_tlog/unittest-report.xml" />
        </exec>
    </target>

    <target name="_unittestMongoTlog" description="Runs the Unit test suite against a TransactionLog backed by Mongo">
        <exec dir="${unit.test.dir}" executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <env key="TRIPOD_CONFIG" value="${unit.test.dir}/data/config.json"/>
            <arg line="--filter ${test} --log-junit ${output.dir}/mongo_tlog/unittest-report.xml" />
        </exec>
    </target>

    <target name="codecoverage" depends="init" description="Runs the unit tests and generates code coverage report">
        <exec dir="${unit.test.dir}" executable="${vendor.dir}/bin/phpunit" failonerror="true">
            <arg line="--filter ${test} --coverage-html ${codecoverage.dir}/all" />
        </exec>
    </target>
</project>
